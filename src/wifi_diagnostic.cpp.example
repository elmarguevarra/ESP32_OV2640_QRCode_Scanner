/*
 * WiFi Diagnostic Tool
 * 
 * If your camera project is not connecting to WiFi, replace main.cpp 
 * content with this code temporarily to test WiFi connectivity.
 * 
 * Usage:
 * 1. Copy this content to src/main.cpp
 * 2. Update WiFi credentials below
 * 3. Upload and check serial monitor
 */

#include <WiFi.h>

// Update these with your WiFi credentials
const char* ssid = "self_space_2.4";
const char* password = "aybilab19";

void setup() {
  Serial.begin(115200);
  delay(2000);
  
  Serial.println("ESP32-S3 WiFi Diagnostic Tool");
  Serial.println("==============================");
  
  // Print system info
  Serial.printf("Chip: %s Rev %d\n", ESP.getChipModel(), ESP.getChipRevision());
  Serial.printf("MAC Address: %s\n", WiFi.macAddress().c_str());
  
  // Scan for networks
  Serial.println("\nScanning for WiFi networks...");
  int n = WiFi.scanNetworks();
  
  if (n == 0) {
    Serial.println("No networks found");
  } else {
    Serial.printf("Found %d networks:\n", n);
    for (int i = 0; i < n; ++i) {
      Serial.printf("%d: %s (%d dBm) %s\n", 
                    i + 1, 
                    WiFi.SSID(i).c_str(), 
                    WiFi.RSSI(i),
                    WiFi.encryptionType(i) == WIFI_AUTH_OPEN ? "Open" : "Encrypted");
    }
  }
  
  // Try to connect to your network
  Serial.printf("\nAttempting to connect to: %s\n", ssid);
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✓ WiFi connected successfully!");
    Serial.printf("IP Address: %s\n", WiFi.localIP().toString().c_str());
    Serial.printf("Signal Strength: %d dBm\n", WiFi.RSSI());
    Serial.printf("Gateway: %s\n", WiFi.gatewayIP().toString().c_str());
    Serial.printf("DNS: %s\n", WiFi.dnsIP().toString().c_str());
  } else {
    Serial.println("\n✗ WiFi connection failed!");
    Serial.println("Possible issues:");
    Serial.println("1. Wrong SSID or password");
    Serial.println("2. Network is 5GHz (ESP32 only supports 2.4GHz)");
    Serial.println("3. Network is hidden");
    Serial.println("4. Poor signal strength");
    Serial.println("5. MAC address filtering");
  }
}

void loop() {
  // Monitor connection status
  if (WiFi.status() == WL_CONNECTED) {
    Serial.printf("Connected - IP: %s, Signal: %d dBm\n", 
                  WiFi.localIP().toString().c_str(), 
                  WiFi.RSSI());
  } else {
    Serial.println("WiFi disconnected - attempting reconnect...");
    WiFi.reconnect();
  }
  
  delay(10000); // Check every 10 seconds
}